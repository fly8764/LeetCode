图：
1.	“最少”：最少路径，最少…… 一般联想到 图，BFS，回溯法，来寻找最短路径；

2.	中序遍历：
二叉搜索树的中序遍历是一个严格递增序列；可以通过这个特点来判断一个二叉树是否为二叉搜索树，
但还要注意的是，二叉搜素树的中序遍历结果是一个严格递增数列，不存在同值的情况；
所以需要将结果 通过集合set() 来去重。

3.

数组：
1．哈希表 K数之和
K数之和，一般是先确定两数之和，将其保存在哈希表(字典)中，各种和的个数，或者下标；
然后对应另外的k-2个数，使用循环遍历，
不同值 不同下标
不同值：要先排序，在循环时，遇到和上一个值相同的情况，跳过(右移); 
同时，要注意，当对k-2个数从左往右循环时，对应 哈希表 的建立，应该从右往左循环，
这样当遇到同值情况时，会先保存下标靠右的；这样，在最后组合时，满足 哈希表中的数字都在 k-2个数的右边，
不会漏解(如果求哈希表时，从左往右，就难满足最后组合的要求，在有同值的情况下，容易漏解。) 
e.g. 本题
不同下标：不用排序，直接找到满足和的组合即可。

2.对于圆环这种数组，要想循环访问，就要注意左右边界：
左边界小于0时，不是没有值，而是到达了末尾，及右边界；
右边访问大于有边界时，再往右，是到 开头；
所以可以通过 增加取余的操作来保证不超过边界
Pre = (i-1+n)%n  pos = (i+n)%n
